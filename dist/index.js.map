{"version":3,"sources":["../src/index.ts","../src/resolve.ts"],"sourcesContent":["import { defu } from 'defu';\nimport { getTsconfig } from 'get-tsconfig';\nimport path from 'node:path';\nimport { createUnplugin } from 'unplugin';\nimport { createFilter } from '@rollup/pluginutils';\nimport { type JscTarget, transform, type TransformConfig } from '@swc/core';\nimport { resolveId } from './resolve.js';\nimport type { Options, SWCOptions } from './types.js';\n\nexport const unpluginSwc = createUnplugin((swcOptions: Options = {}) => {\n  const { tsconfigFile, minify, include, exclude, ...options } = swcOptions;\n\n  const filter = createFilter(\n    include || /\\.m?[jt]sx?$/,\n    exclude || /node_modules/\n  );\n\n  return {\n    name: 'unplugin-swc',\n\n    resolveId,\n\n    async transform(code, id) {\n      if (!filter(id)) {\n        return null;\n      }\n\n      const compilerOptions =\n        tsconfigFile === false\n          ? {}\n          : getTsconfig(\n              path.dirname(id),\n              tsconfigFile === true ? undefined : tsconfigFile\n            )?.config?.compilerOptions || {};\n\n      const isTs = /\\.m?tsx?$/.test(id);\n\n      let jsc: SWCOptions = {\n        parser: {\n          syntax: isTs ? 'typescript' : 'ecmascript',\n        },\n        transform: {},\n      };\n\n      if (compilerOptions.jsx) {\n        Object.assign(jsc.parser || {}, {\n          [isTs ? 'tsx' : 'jsx']: true,\n        });\n        Object.assign<TransformConfig, TransformConfig>(jsc.transform || {}, {\n          react: {\n            pragma: compilerOptions.jsxFactory,\n            pragmaFrag: compilerOptions.jsxFragmentFactory,\n            importSource: compilerOptions.jsxImportSource,\n          },\n        });\n      }\n\n      // https://github.com/vendure-ecommerce/vendure/issues/2099\n      // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\n      Object.assign(jsc.transform || {}, {\n        // https://www.typescriptlang.org/tsconfig#useDefineForClassFields\n        useDefineForClassFields:\n          compilerOptions.useDefineForClassFields || false,\n      });\n\n      if (compilerOptions.experimentalDecorators) {\n        // class name is required by type-graphql to generate correct graphql type\n        jsc.keepClassNames = true;\n        Object.assign(jsc.parser || {}, {\n          decorators: true,\n        });\n        Object.assign<TransformConfig, TransformConfig>(jsc.transform || {}, {\n          legacyDecorator: true,\n          decoratorMetadata: compilerOptions.emitDecoratorMetadata,\n        });\n      }\n\n      if (compilerOptions.target) {\n        // jsc target is lowercase.\n        jsc.target = compilerOptions.target.toLowerCase() as JscTarget;\n      }\n\n      if (options.jsc) {\n        jsc = defu<SWCOptions, SWCOptions[]>(options.jsc, jsc);\n      }\n\n      const result = await transform(code, {\n        filename: id,\n        sourceMaps: true,\n        ...options,\n        jsc,\n      });\n\n      return {\n        code: result.code,\n        map: result.map && JSON.parse(result.map),\n      };\n    },\n    vite: {\n      config() {\n        return {\n          esbuild: false,\n        };\n      },\n    },\n    rollup: {\n      async renderChunk(code, chunk) {\n        if (minify) {\n          const result = await transform(code, {\n            minify: true,\n            sourceMaps: true,\n            filename: chunk.fileName,\n          });\n          return {\n            code: result.code,\n            map: result.map,\n          };\n        }\n        return null;\n      },\n    },\n  };\n});\n","import fs from 'node:fs';\nimport { dirname, join, resolve } from 'node:path';\nimport { pathExists } from 'path-exists';\n\nconst RESOLVE_EXTENSIONS = [\n  '.tsx',\n  '.ts',\n  '.mts',\n  '.jsx',\n  '.js',\n  '.mjs',\n  '.cjs',\n];\n\nconst resolveFile = async (resolved: string, index = false) => {\n  resolved = resolved.replace(/\\.(js|jsx|cjs|mjs|ts|tsx|mts|cts)$/gi, '');\n  console.log('resolved', resolved, index);\n\n  for (const ext of RESOLVE_EXTENSIONS) {\n    const file = index ? join(resolved, `index${ext}`) : `${resolved}${ext}`;\n    if (await pathExists(file)) {\n      return file;\n    }\n  }\n  return undefined;\n};\n\nexport const resolveId = async (importee: string, importer?: string) => {\n  if (importer && importee[0] === '.') {\n    const absolutePath = resolve(\n      importer ? dirname(importer) : process.cwd(),\n      importee\n    );\n\n    let resolved = await resolveFile(absolutePath);\n\n    if (\n      !resolved &&\n      (await pathExists(absolutePath)) &&\n      (await fs.promises.stat(absolutePath).then((stat) => stat.isDirectory()))\n    ) {\n      resolved = await resolveFile(absolutePath, true);\n    }\n\n    return resolved;\n  }\n  return undefined;\n};\n"],"mappings":"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","names":[]}