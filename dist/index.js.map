{"version":3,"sources":["../src/index.ts","../src/resolve.ts"],"sourcesContent":["import path from 'path';\nimport { type FilterPattern, createFilter } from '@rollup/pluginutils';\nimport {\n  type JscConfig,\n  type Options as SwcOptions,\n  type TransformConfig,\n  transform,\n} from '@swc/core';\nimport { defu } from 'defu';\nimport { loadTsConfig } from 'load-tsconfig';\nimport { createUnplugin } from 'unplugin';\nimport { resolveId } from './resolve.js';\n\nexport type UnpluginSwcOptions = SwcOptions & {\n  include?: FilterPattern;\n  exclude?: FilterPattern;\n  tsconfigFile?: string | boolean;\n};\n\ntype WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n  [Property in Key]-?: Type[Property];\n};\n\ntype SWCOptions = WithRequiredProperty<JscConfig, 'parser' | 'transform'>;\n\nexport const swcUnpluginTs = createUnplugin(\n  ({\n    tsconfigFile,\n    minify,\n    include,\n    exclude,\n    ...options\n  }: UnpluginSwcOptions = {}) => {\n    const filter = createFilter(\n      include || /\\.[jt]sx?$/,\n      exclude || /node_modules/\n    );\n\n    return {\n      name: 'swc',\n\n      resolveId,\n\n      async transform(code, id) {\n        if (!filter(id)) return null;\n\n        const compilerOptions =\n          tsconfigFile === false\n            ? {}\n            : loadTsConfig(\n                path.dirname(id),\n                tsconfigFile === true ? undefined : tsconfigFile\n              )?.data?.compilerOptions || {};\n\n        const isTs = /\\.tsx?$/.test(id);\n\n        let jsc: SWCOptions = {\n          parser: {\n            syntax: isTs ? 'typescript' : 'ecmascript',\n          },\n          transform: {},\n        };\n\n        if (compilerOptions.jsx) {\n          Object.assign(jsc.parser || {}, {\n            [isTs ? 'tsx' : 'jsx']: true,\n          });\n          Object.assign<TransformConfig, TransformConfig>(jsc.transform || {}, {\n            react: {\n              pragma: compilerOptions.jsxFactory,\n              pragmaFrag: compilerOptions.jsxFragmentFactory,\n              importSource: compilerOptions.jsxImportSource,\n            },\n          });\n        }\n\n        // https://github.com/vendure-ecommerce/vendure/issues/2099\n        // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\n        Object.assign(jsc.transform || {}, {\n          useDefineForClassFields:\n            compilerOptions.useDefineForClassFields || false,\n        });\n\n        if (compilerOptions.experimentalDecorators) {\n          // class name is required by type-graphql to generate correct graphql type\n          jsc.keepClassNames = true;\n          Object.assign(jsc.parser || {}, {\n            decorators: true,\n          });\n          Object.assign<TransformConfig, TransformConfig>(jsc.transform || {}, {\n            legacyDecorator: true,\n            decoratorMetadata: compilerOptions.emitDecoratorMetadata,\n          });\n        }\n\n        if (compilerOptions.target) {\n          jsc.target = compilerOptions.target;\n        }\n\n        if (options.jsc) {\n          jsc = defu<SWCOptions, SWCOptions[]>(options.jsc, jsc);\n        }\n\n        const result = await transform(code, {\n          filename: id,\n          sourceMaps: true,\n          ...options,\n          jsc,\n        });\n        return {\n          code: result.code,\n          map: result.map && JSON.parse(result.map),\n        };\n      },\n\n      vite: {\n        config() {\n          return {\n            esbuild: false,\n          };\n        },\n      },\n\n      rollup: {\n        async renderChunk(code, chunk) {\n          if (minify) {\n            const result = await transform(code, {\n              sourceMaps: true,\n              minify: true,\n              filename: chunk.fileName,\n            });\n            return {\n              code: result.code,\n              map: result.map,\n            };\n          }\n          return null;\n        },\n      },\n    };\n  }\n);\n","import fs from 'fs';\nimport { dirname, join, resolve } from 'path';\nimport { pathExists } from 'path-exists';\n\nconst RESOLVE_EXTENSIONS = ['.tsx', '.ts', '.jsx', '.js', '.mjs', '.cjs'];\n\nconst resolveFile = async (resolved: string, index = false) => {\n  for (const ext of RESOLVE_EXTENSIONS) {\n    const file = index ? join(resolved, `index${ext}`) : `${resolved}${ext}`;\n    if (await pathExists(file)) return file;\n  }\n};\n\nexport const resolveId = async (importee: string, importer?: string) => {\n  if (importer && importee[0] === '.') {\n    const absolutePath = resolve(\n      importer ? dirname(importer) : process.cwd(),\n      importee\n    );\n\n    let resolved = await resolveFile(absolutePath);\n\n    if (\n      !resolved &&\n      (await pathExists(absolutePath)) &&\n      (await fs.promises.stat(absolutePath).then((stat) => stat.isDirectory()))\n    ) {\n      resolved = await resolveFile(absolutePath, true);\n    }\n\n    return resolved;\n  }\n};\n"],"mappings":"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","names":[]}